@using Fluxor
@using BlazorFluxorSample.Stores.Weather
@inject IState<WeatherForecastState> _weatherForecastState;
@inject IDispatcher _dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<h1>Weather forecast</h1>

@if (_weatherForecastState.Value.WeatherForecasts == null)
{
    <p><em>Please load the weather.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < _weatherForecastState.Value.WeatherForecasts.Length; i++)
            {
                var index = i;
                var forecast = _weatherForecastState.Value.WeatherForecasts[i];
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td><button @onclick="() => _dispatcher.Dispatch(new SetSelectedWeatherForecast(index))">Select</button></td>
                </tr>
            }
        </tbody>
    </table>
}