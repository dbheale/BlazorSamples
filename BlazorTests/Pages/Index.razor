@page "/"

<PageTitle>Index</PageTitle>

@_someObject.SampleText

<CascadingValue Value="_someObject">
    <IndexChild1></IndexChild1>
    <IndexChild2></IndexChild2>
</CascadingValue>

<SurveyPrompt Title="How is Blazor working for you?" />

@code {

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"{GetType()}.OnAfterRender({firstRender})");
        if (firstRender)
        {
            _someObject.SampleTextHasChanged += (sender, args) => StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"{GetType()}.OnAfterRenderAsync({firstRender})");
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        _someObject = new SomeObject();
        Console.WriteLine($"{GetType()}.OnInitialized()");
        base.OnInitialized();
    }

    protected override Task OnInitializedAsync()
    {
        Console.WriteLine($"{GetType()}.OnInitializedAsync()");
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"{GetType()}.OnParametersSet()");
        base.OnParametersSet();
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine($"{GetType()}.OnParametersSetAsync()");
        return base.OnParametersSetAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine($"{GetType()}.OnParametersSetAsync(ParameterView: {parameters})");
        return base.SetParametersAsync(parameters);
    }

    public class SomeObject
    {
        private string _sampleText = "Nothing has been set yet.";

        public EventHandler? SampleTextHasChanged { get; set; }

        public string SampleText
        {
            get => _sampleText;
            set
            {
                _sampleText = value;
                SampleTextHasChanged?.Invoke(this, EventArgs.Empty);
            }
        }
    }

    private SomeObject? _someObject;
}